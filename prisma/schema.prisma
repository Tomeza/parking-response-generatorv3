generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [pg_trgm]
}

model Knowledge {
  id               Int                      @id @default(autoincrement())
  main_category    String                   @db.VarChar(50)
  sub_category     String                   @db.VarChar(50)
  detail_category  String?
  question         String
  answer           String
  is_template      Boolean                  @default(false)
  usage            String?                  @db.VarChar(10)
  note             String?
  issue            String?
  search_vector    Unsupported("tsvector")?
  answer_tsv       Unsupported("tsvector")?
  created_at       DateTime                 @default(now())
  question_tsv     Unsupported("tsvector")?
  updated_at       DateTime                 @default(now()) @updatedAt
  feedback_weights FeedbackWeight[]
  knowledge_tags   KnowledgeTag[]

  @@index([main_category, sub_category])
  @@index([search_vector], type: Gin)
  @@index([question_tsv], type: Gin)
  @@index([answer_tsv], type: Gin)
  @@index([answer_tsv], map: "knowledge_answer_tsv_idx", type: Gin)
  @@index([question_tsv], map: "knowledge_question_tsv_idx", type: Gin)
}

model Tag {
  id             Int            @id @default(autoincrement())
  description    String?
  created_at     DateTime       @default(now())
  name           String         @default("") @db.VarChar(50)
  updated_at     DateTime       @default(now()) @updatedAt
  alert_words    AlertWord[]    @relation("AlertWordToTag")
  knowledge_tags KnowledgeTag[]
  synonyms       TagSynonym[]
}

model KnowledgeTag {
  knowledge_id Int
  tag_id       Int
  created_at   DateTime  @default(now())
  id           Int       @id @default(autoincrement())
  knowledge    Knowledge @relation(fields: [knowledge_id], references: [id])
  tag          Tag       @relation(fields: [tag_id], references: [id])

  @@unique([knowledge_id, tag_id])
}

model AlertWord {
  id             Int    @id @default(autoincrement())
  word           String @unique @db.VarChar(50)
  related_tag_id Int?
  priority       Int    @default(5)
  related_tag    Tag?   @relation("AlertWordToTag", fields: [related_tag_id], references: [id])
}

model ResponseLog {
  id                 Int      @id @default(autoincrement())
  query              String
  response           String
  used_knowledge_ids Int[]
  missing_tags       String[]
  missing_alerts     String[]
  feedback           Boolean?
  created_at         DateTime @default(now())
}

model SeasonalInfo {
  id          Int      @id @default(autoincrement())
  info_type   String   @db.VarChar(50)
  start_date  DateTime @db.Date
  end_date    DateTime @db.Date
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now())
}

model FeedbackWeight {
  query_pattern  String    @id @db.VarChar(100)
  knowledge_id   Int
  weight         Float     @default(1.0)
  positive_count Int       @default(0)
  negative_count Int       @default(0)
  last_updated   DateTime  @default(now())
  knowledge      Knowledge @relation(fields: [knowledge_id], references: [id])
}

model TagSynonym {
  id      Int    @id @default(autoincrement())
  tag_id  Int
  synonym String @db.VarChar(50)
  tag     Tag    @relation(fields: [tag_id], references: [id])

  @@unique([tag_id, synonym])
}

model BusyPeriod {
  id          Int      @id @default(autoincrement())
  startDate   DateTime
  endDate     DateTime
  year        Int
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([startDate, endDate])
  @@index([year])
}

model LargeVehicleSeason {
  id          Int      @id @default(autoincrement())
  startDate   DateTime
  endDate     DateTime
  year        Int
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([startDate, endDate])
  @@index([year])
}

model CategoryWeight {
  id        Int      @id @default(autoincrement())
  category  String   @unique
  weight    Float    @default(1.0)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model TagWeight {
  id        Int      @id @default(autoincrement())
  tag       String   @unique
  weight    Float    @default(1.0)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model SearchCache {
  id         Int      @id @default(autoincrement())
  query      String
  tsQuery    String   @map("ts_query")
  results    Json
  total      Int
  analysis   Json
  createdAt  DateTime @default(now()) @map("created_at")
  expiresAt  DateTime @map("expires_at")

  @@map("SearchCache")
  @@index([query])
  @@index([expiresAt])
}

model SearchHistory {
  id                  Int      @id @default(autoincrement())
  query               String
  clicked_knowledge_id Int
  clicked_position    Int
  created_at          DateTime @default(now())
  updated_at          DateTime @default(now()) @updatedAt
}
