name: CI/CD Pipeline

on:
  push:
    branches: [ main, feat/supabase-query-routing ]
  pull_request:
    branches: [ main ]

jobs:
  # 1. テンプレート欠損チェック
  template-coverage:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Check template coverage
        run: |
          echo "Checking template coverage..."
          npx tsx scripts/check-template-coverage.ts
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
      
      - name: Report template status
        if: always()
        run: |
          echo "Template coverage check completed"
          # 結果をSlackなどに通知する場合はここに追加

  # 2. 型チェックとLint
  type-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Type check
        run: npx tsc --noEmit
      
      - name: Lint
        run: npx eslint . --ext .ts,.tsx

  # 3. 回帰テスト
  regression-test:
    runs-on: ubuntu-latest
    needs: [type-check]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run regression tests
        run: |
          echo "Running regression tests..."
          npx tsx scripts/test-phase2-extended.ts
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: test-results/
          retention-days: 30

  # 4. ビルドテスト
  build:
    runs-on: ubuntu-latest
    needs: [type-check]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build
        run: npm run build
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: .next/
          retention-days: 7

  # 5. セキュリティチェック
  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run security audit
        run: npm audit --audit-level moderate
      
      - name: Check for secrets
        run: |
          echo "Checking for potential secrets..."
          # 基本的なシークレットチェック
          if grep -r "password\|secret\|key\|token" --include="*.ts" --include="*.js" --include="*.json" src/ | grep -v "process.env" | grep -v "NEXT_PUBLIC"; then
            echo "Potential secrets found in code!"
            exit 1
          fi

  # 6. デプロイ（mainブランチのみ）
  deploy:
    runs-on: ubuntu-latest
    needs: [template-coverage, type-check, regression-test, build, security]
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Deploy to production
        run: |
          echo "Deploying to production..."
          # ここに実際のデプロイコマンドを追加
          # 例: npm run deploy
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

  # 7. 通知
  notify:
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()
    steps:
      - name: Notify success
        if: success()
        run: |
          echo "✅ All checks passed! Deployment successful."
          # Slack通知などをここに追加
      
      - name: Notify failure
        if: failure()
        run: |
          echo "❌ Some checks failed. Please review the logs."
          # Slack通知などをここに追加 